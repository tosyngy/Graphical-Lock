/* =========================================================
 * bootstrap-timepicker.js
 * http://www.github.com/jdewit/bootstrap-timepicker
 * =========================================================
 * Copyright 2012
 *
 * Created By:
 * Joris de Wit @joris_dewit
 *
 * Contributions By:
 * Gilbert @mindeavor
 * Koen Punt info@koenpunt.nl
 * Nek
 * Chris Martin
 * Dominic Barnes contact@dominicbarnes.us
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

!function(a) {
    "use strict";
    var b = function(b, c) {
        this.$element = a(b), this.options = a.extend({}, a.fn.timepicker.defaults, c, this.$element.data()), this.minuteStep = this.options.minuteStep || this.minuteStep, this.secondStep = this.options.secondStep || this.secondStep, this.showMeridian = this.options.showMeridian || this.showMeridian, this.showSeconds = this.options.showSeconds || this.showSeconds, this.showInputs = this.options.showInputs || this.showInputs, this.disableFocus = this.options.disableFocus || this.disableFocus, this.template = this.options.template || this.template, this.modalBackdrop = this.options.modalBackdrop || this.modalBackdrop, this.defaultTime = this.options.defaultTime || this.defaultTime, this.open = !1, this.init()
    };
    b.prototype = {constructor: b, init: function() {
            this.$element.parent().hasClass("input-append") ? (this.$element.parent(".input-append").find(".add-on").on("click", a.proxy(this.showWidget, this)), this.$element.on({focus: a.proxy(this.highlightUnit, this), click: a.proxy(this.highlightUnit, this), keypress: a.proxy(this.elementKeypress, this), blur: a.proxy(this.blurElement, this)})) : this.template ? this.$element.on({focus: a.proxy(this.showWidget, this), click: a.proxy(this.showWidget, this), blur: a.proxy(this.blurElement, this)}) : this.$element.on({focus: a.proxy(this.highlightUnit, this), click: a.proxy(this.highlightUnit, this), keypress: a.proxy(this.elementKeypress, this), blur: a.proxy(this.blurElement, this)}), this.$widget = a(this.getTemplate()).appendTo("body"), this.$widget.on("click", a.proxy(this.widgetClick, this)), this.showInputs && this.$widget.find("input").on({click: function() {
                    this.select()
                }, keypress: a.proxy(this.widgetKeypress, this), change: a.proxy(this.updateFromWidgetInputs, this)}), this.setDefaultTime(this.defaultTime)
        }, showWidget: function(b) {
            if (b.stopPropagation(), b.preventDefault(), !this.open) {
                this.$element.trigger("show"), this.disableFocus && this.$element.blur();
                var c = a.extend({}, this.$element.offset(), {height: this.$element[0].offsetHeight});
                this.updateFromElementVal(), a("html").trigger("click.timepicker.data-api").one("click.timepicker.data-api", a.proxy(this.hideWidget, this)), "modal" === this.template ? this.$widget.modal("show").on("hidden", a.proxy(this.hideWidget, this)) : (this.$widget.css({top: c.top + c.height, left: c.left}), this.open || this.$widget.addClass("open")), this.open = !0, this.$element.trigger("shown")
            }
        }, hideWidget: function() {
            this.$element.trigger("hide"), "modal" === this.template ? this.$widget.modal("hide") : this.$widget.removeClass("open"), this.open = !1, this.$element.trigger("hidden")
        }, widgetClick: function(b) {
            b.stopPropagation(), b.preventDefault();
            var c = a(b.target).closest("a").data("action");
            c && (this[c](), this.update())
        }, widgetKeypress: function(b) {
            var c = a(b.target).closest("input").attr("name");
            switch (b.keyCode) {
                case 9:
                    this.showMeridian ? "meridian" == c && this.hideWidget() : this.showSeconds ? "second" == c && this.hideWidget() : "minute" == c && this.hideWidget();
                    break;
                case 27:
                    this.hideWidget();
                    break;
                case 38:
                    switch (c) {
                        case"hour":
                            this.incrementHour();
                            break;
                        case"minute":
                            this.incrementMinute();
                            break;
                        case"second":
                            this.incrementSecond();
                            break;
                        case"meridian":
                            this.toggleMeridian()
                    }
                    this.update();
                    break;
                case 40:
                    switch (c) {
                        case"hour":
                            this.decrementHour();
                            break;
                        case"minute":
                            this.decrementMinute();
                            break;
                        case"second":
                            this.decrementSecond();
                            break;
                        case"meridian":
                            this.toggleMeridian()
                    }
                    this.update()
                }
        }, elementKeypress: function(a) {
            switch (this.$element.get(0), a.keyCode) {
                case 0:
                    break;
                case 9:
                    this.updateFromElementVal(), this.showMeridian ? "meridian" != this.highlightedUnit && (a.preventDefault(), this.highlightNextUnit()) : this.showSeconds ? "second" != this.highlightedUnit && (a.preventDefault(), this.highlightNextUnit()) : "minute" != this.highlightedUnit && (a.preventDefault(), this.highlightNextUnit());
                    break;
                case 27:
                    this.updateFromElementVal();
                    break;
                case 37:
                    this.updateFromElementVal(), this.highlightPrevUnit();
                    break;
                case 38:
                    switch (this.highlightedUnit) {
                        case"hour":
                            this.incrementHour();
                            break;
                        case"minute":
                            this.incrementMinute();
                            break;
                        case"second":
                            this.incrementSecond();
                            break;
                        case"meridian":
                            this.toggleMeridian()
                    }
                    this.updateElement();
                    break;
                case 39:
                    this.updateFromElementVal(), this.highlightNextUnit();
                    break;
                case 40:
                    switch (this.highlightedUnit) {
                        case"hour":
                            this.decrementHour();
                            break;
                        case"minute":
                            this.decrementMinute();
                            break;
                        case"second":
                            this.decrementSecond();
                            break;
                        case"meridian":
                            this.toggleMeridian()
                    }
                    this.updateElement()
            }
            0 !== a.keyCode && 8 !== a.keyCode && 9 !== a.keyCode && 46 !== a.keyCode && a.preventDefault()
        }, setValues: function(a) {
            if (this.showMeridian) {
                var b = a.split(" "), c = b[0].split(":");
                this.meridian = b[1]
            } else
                var c = a.split(":");
            this.hour = parseInt(c[0], 10), this.minute = parseInt(c[1], 10), this.second = parseInt(c[2], 10), isNaN(this.hour) && (this.hour = 0), isNaN(this.minute) && (this.minute = 0), this.showMeridian ? (this.hour > 12 ? this.hour = 12 : 1 > this.hour && (this.hour = 1), "am" == this.meridian || "a" == this.meridian ? this.meridian = "AM" : ("pm" == this.meridian || "p" == this.meridian) && (this.meridian = "PM"), "AM" != this.meridian && "PM" != this.meridian && (this.meridian = "AM")) : this.hour >= 24 ? this.hour = 23 : 0 > this.hour && (this.hour = 0), 0 > this.minute ? this.minute = 0 : this.minute >= 60 && (this.minute = 59), this.showSeconds && (isNaN(this.second) ? this.second = 0 : 0 > this.second ? this.second = 0 : this.second >= 60 && (this.second = 59)), "" != this.$element.val() && this.updateElement(), this.updateWidget()
        }, setMeridian: function(a) {
            "a" == a || "am" == a || "AM" == a ? this.meridian = "AM" : "p" == a || "pm" == a || "PM" == a ? this.meridian = "PM" : this.updateWidget(), this.updateElement()
        }, setDefaultTime: function(a) {
            if (a) {
                if ("current" === a) {
                    var b = new Date, c = b.getHours(), d = Math.floor(b.getMinutes() / this.minuteStep) * this.minuteStep, e = Math.floor(b.getSeconds() / this.secondStep) * this.secondStep, f = "AM";
                    this.showMeridian && (0 === c ? c = 12 : c >= 12 ? (c > 12 && (c -= 12), f = "PM") : f = "AM"), this.hour = c, this.minute = d, this.second = e, this.meridian = f
                } else
                    "value" === a ? this.setValues(this.$element.val()) : this.setValues(a);
                "" != this.$element.val() && this.updateElement(), this.updateWidget()
            } else
                this.hour = 0, this.minute = 0, this.second = 0
        }, formatTime: function(a, b, c, d) {
            return a = 10 > a ? "0" + a : a, b = 10 > b ? "0" + b : b, c = 10 > c ? "0" + c : c, a + ":" + b + (this.showSeconds ? ":" + c : "") + (this.showMeridian ? " " + d : "")
        }, getTime: function() {
            return this.formatTime(this.hour, this.minute, this.second, this.meridian)
        }, setTime: function(a) {
            this.setValues(a), this.update()
        }, update: function() {
            this.updateElement(), this.updateWidget()
        }, blurElement: function() {
            this.highlightedUnit = void 0, this.updateFromElementVal()
        }, updateElement: function() {
            var a = this.getTime();
            switch (this.$element.val(a).change(), this.highlightedUnit) {
                case"hour":
                    this.highlightHour();
                    break;
                case"minute":
                    this.highlightMinute();
                    break;
                case"second":
                    this.highlightSecond();
                    break;
                case"meridian":
                    this.highlightMeridian()
                }
        }, updateWidget: function() {
            this.showInputs ? (this.$widget.find("input.bootstrap-timepicker-hour").val(10 > this.hour ? "0" + this.hour : this.hour), this.$widget.find("input.bootstrap-timepicker-minute").val(10 > this.minute ? "0" + this.minute : this.minute), this.showSeconds && this.$widget.find("input.bootstrap-timepicker-second").val(10 > this.second ? "0" + this.second : this.second), this.showMeridian && this.$widget.find("input.bootstrap-timepicker-meridian").val(this.meridian)) : (this.$widget.find("span.bootstrap-timepicker-hour").text(this.hour), this.$widget.find("span.bootstrap-timepicker-minute").text(10 > this.minute ? "0" + this.minute : this.minute), this.showSeconds && this.$widget.find("span.bootstrap-timepicker-second").text(10 > this.second ? "0" + this.second : this.second), this.showMeridian && this.$widget.find("span.bootstrap-timepicker-meridian").text(this.meridian))
        }, updateFromElementVal: function() {
            var b = this.$element.val();
            b && (this.setValues(b), this.updateWidget())
        }, updateFromWidgetInputs: function() {
            var b = a("input.bootstrap-timepicker-hour", this.$widget).val() + ":" + a("input.bootstrap-timepicker-minute", this.$widget).val() + (this.showSeconds ? ":" + a("input.bootstrap-timepicker-second", this.$widget).val() : "") + (this.showMeridian ? " " + a("input.bootstrap-timepicker-meridian", this.$widget).val() : "");
            this.setValues(b)
        }, getCursorPosition: function() {
            var a = this.$element.get(0);
            if ("selectionStart"in a)
                return a.selectionStart;
            if (document.selection) {
                a.focus();
                var b = document.selection.createRange(), c = document.selection.createRange().text.length;
                return b.moveStart("character", -a.value.length), b.text.length - c
            }
        }, highlightUnit: function() {
            this.$element.get(0), this.position = this.getCursorPosition(), this.position >= 0 && 2 >= this.position ? this.highlightHour() : this.position >= 3 && 5 >= this.position ? this.highlightMinute() : this.position >= 6 && 8 >= this.position ? this.showSeconds ? this.highlightSecond() : this.highlightMeridian() : this.position >= 9 && 11 >= this.position && this.highlightMeridian()
        }, highlightNextUnit: function() {
            switch (this.highlightedUnit) {
                case"hour":
                    this.highlightMinute();
                    break;
                case"minute":
                    this.showSeconds ? this.highlightSecond() : this.highlightMeridian();
                    break;
                case"second":
                    this.highlightMeridian();
                    break;
                case"meridian":
                    this.highlightHour()
                }
        }, highlightPrevUnit: function() {
            switch (this.highlightedUnit) {
                case"hour":
                    this.highlightMeridian();
                    break;
                case"minute":
                    this.highlightHour();
                    break;
                case"second":
                    this.highlightMinute();
                    break;
                case"meridian":
                    this.showSeconds ? this.highlightSecond() : this.highlightMinute()
                }
        }, highlightHour: function() {
            this.highlightedUnit = "hour", this.$element.get(0).setSelectionRange(0, 2)
        }, highlightMinute: function() {
            this.highlightedUnit = "minute", this.$element.get(0).setSelectionRange(3, 5)
        }, highlightSecond: function() {
            this.highlightedUnit = "second", this.$element.get(0).setSelectionRange(6, 8)
        }, highlightMeridian: function() {
            this.highlightedUnit = "meridian", this.showSeconds ? this.$element.get(0).setSelectionRange(9, 11) : this.$element.get(0).setSelectionRange(6, 8)
        }, incrementHour: function() {
            if (this.showMeridian)
                if (11 === this.hour)
                    this.toggleMeridian();
                else if (12 === this.hour)
                    return this.hour = 1;
            return 23 === this.hour ? this.hour = 0 : (this.hour = this.hour + 1, void 0)
        }, decrementHour: function() {
            if (this.showMeridian) {
                if (1 === this.hour)
                    return this.hour = 12;
                12 === this.hour && this.toggleMeridian()
            }
            return 0 === this.hour ? this.hour = 23 : (this.hour = this.hour - 1, void 0)
        }, incrementMinute: function() {
            var a = this.minute + this.minuteStep - this.minute % this.minuteStep;
            a > 59 ? (this.incrementHour(), this.minute = a - 60) : this.minute = a
        }, decrementMinute: function() {
            var a = this.minute - this.minuteStep;
            0 > a ? (this.decrementHour(), this.minute = a + 60) : this.minute = a
        }, incrementSecond: function() {
            var a = this.second + this.secondStep - this.second % this.secondStep;
            a > 59 ? (this.incrementMinute(), this.second = a - 60) : this.second = a
        }, decrementSecond: function() {
            var a = this.second - this.secondStep;
            0 > a ? (this.decrementMinute(), this.second = a + 60) : this.second = a
        }, toggleMeridian: function() {
            this.meridian = "AM" === this.meridian ? "PM" : "AM", this.update()
        }, getTemplate: function() {
            if (this.options.templates[this.options.template])
                return this.options.templates[this.options.template];
            if (this.showInputs)
                var a = '<input type="text" name="hour" class="bootstrap-timepicker-hour" maxlength="2"/>', b = '<input type="text" name="minute" class="bootstrap-timepicker-minute" maxlength="2"/>', c = '<input type="text" name="second" class="bootstrap-timepicker-second" maxlength="2"/>', d = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian" maxlength="2"/>';
            else
                var a = '<span class="bootstrap-timepicker-hour"></span>', b = '<span class="bootstrap-timepicker-minute"></span>', c = '<span class="bootstrap-timepicker-second"></span>', d = '<span class="bootstrap-timepicker-meridian"></span>';
            var f, e = '<table class="' + (this.showSeconds ? "show-seconds" : "") + " " + (this.showMeridian ? "show-meridian" : "") + '">' + "<tr>" + '<td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td>' + '<td class="separator">&nbsp;</td>' + '<td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="incrementSecond"><i class="icon-chevron-up"></i></a></td>' : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>' : "") + "</tr>" + "<tr>" + "<td>" + a + "</td> " + '<td class="separator">:</td>' + "<td>" + b + "</td> " + (this.showSeconds ? '<td class="separator">:</td><td>' + c + "</td>" : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td>' + d + "</td>" : "") + "</tr>" + "<tr>" + '<td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td>' + '<td class="separator"></td>' + '<td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="decrementSecond"><i class="icon-chevron-down"></i></a></td>' : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>' : "") + "</tr>" + "</table>";
            switch (this.options.template) {
                case"modal":
                    f = '<div class="bootstrap-timepicker modal hide fade in" style="top: 30%; margin-top: 0; width: 200px; margin-left: -100px;" data-backdrop="' + (this.modalBackdrop ? "true" : "false") + '">' + '<div class="modal-header">' + '<a href="#" class="close" data-dismiss="modal">\u0413\u2014</a>' + "<h3>Pick a Time</h3>" + "</div>" + '<div class="modal-content">' + e + "</div>" + '<div class="modal-footer">' + '<a href="#" class="btn btn-primary" data-dismiss="modal">Ok</a>' + "</div>" + "</div>";
                    break;
                case"dropdown":
                    f = '<div class="bootstrap-timepicker dropdown-menu">' + e + "</div>"
            }
            return f
        }}, a.fn.timepicker = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("timepicker"), f = "object" == typeof c && c;
            e || d.data("timepicker", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.timepicker.defaults = {minuteStep: 15, secondStep: 15, disableFocus: !1, defaultTime: "current", showSeconds: !1, showInputs: !0, showMeridian: !0, template: "dropdown", modalBackdrop: !1, templates: {}}, a.fn.timepicker.Constructor = b
}(window.jQuery);